{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["renderUnit","val","item","idx","price","discount","count","quantity","toFixed","reducer","items","action","type","name","splice","slice","key","App","useReducer","dispatch","columns","title","dataIndex","render","value","onChange","e","target","onClick","className","style","marginLeft","dataSource","pagination","rowKey","findIndex","v","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wVAaA,SAASA,EAAWC,EAAUC,EAAYC,GACxC,MAAM,GAAN,QAAWD,EAAKE,MAAQF,EAAKG,UAAYH,EAAKI,MAAQJ,EAAKK,WAAWC,QAAQ,IAUhF,SAASC,EAAQC,EAAcC,GAC7B,OAAOA,EAAOC,MACZ,IAAK,MACH,MAAM,CAAE,CAAEC,KAAM,GAAIT,MAAO,EAAGE,MAAO,EAAGD,SAAU,EAAGE,SAAU,IAA/D,mBAAuEG,IACzE,IAAK,QACH,MAAM,GACR,IAAK,SACH,OAAOA,EAAMI,OAAOH,EAAOR,IAAK,GAClC,IAAK,SACH,MAAM,GAAN,mBACKO,EAAMK,MAAM,EAAGJ,EAAOR,MAD3B,gBAEMO,EAAMC,EAAOR,KAFnB,eAE0BQ,EAAOK,IAAML,EAAOV,OAF9C,YAGKS,EAAMK,MAAMJ,EAAOR,IAAI,MA0DnBc,MArDf,WAAgB,IAAD,EAEeC,qBAAWT,EAAS,IAFnC,mBAELC,EAFK,KAEES,EAFF,KAIPC,EAAU,CACd,CAAEC,MAAO,eAAMC,UAAW,OAAQC,OAAQ,SAACtB,EAAUC,EAAYC,GAC/D,OAAO,kBAAC,IAAD,CAAOqB,MAAOvB,EAAKwB,SAAU,SAAAC,GAAC,OAAIP,EAAS,CAAEP,KAAM,SAAUI,IAAK,OAAQf,IAAKyB,EAAEC,OAAOH,MAAOrB,aAExG,CAAEkB,MAAO,eAAMC,UAAW,QAASC,OAAQ,SAACtB,EAAUC,EAAYC,GAC9D,OAAO,kBAAC,IAAD,CAAaqB,MAAOvB,EAAKwB,SAAU,SAAAxB,GAAG,OAAIkB,EAAS,CAACP,KAAM,SAAUI,IAAK,QAASf,MAAKE,aAGlG,CACEkB,MAAO,eAAMC,UAAW,WAAYC,OAAQ,SAACtB,EAAUC,EAAYC,GACjE,OAAO,kBAAC,IAAD,CAAaqB,MAAOvB,EAAKwB,SAAU,SAAAxB,GAAG,OAAIkB,EAAS,CAACP,KAAM,SAAUI,IAAK,WAAYf,MAAKE,aAGrG,CACEkB,MAAO,eAAMC,UAAW,QAASC,OAAQ,SAACtB,EAAUC,EAAYC,GAC9D,OAAO,kBAAC,IAAD,CAAaqB,MAAOvB,EAAKwB,SAAU,SAAAxB,GAAG,OAAIkB,EAAS,CAACP,KAAM,SAAUI,IAAK,QAASf,MAAKE,aAGlG,CACEkB,MAAO,eAAMC,UAAW,OAAQC,OAAQvB,GAE1C,CACEqB,MAAO,eAAMC,UAAW,SAAUC,OAAQ,SAACtB,EAAUC,EAAYC,GAC/D,OAAO,kBAAC,IAAD,CAAQS,KAAK,SAASgB,QAAS,kBAAMT,EAAS,CAACP,KAAM,SAAUT,UAA/D,mBAKb,OACE,yBAAK0B,UAAU,OACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,gBACb,kBAAC,IAAD,CAAQjB,KAAK,UAAUkB,MAAO,CAACC,WAAY,IACzCH,QAAS,kBAAMT,EAAS,CAAEP,KAAM,UADlC,gBAIA,kBAAC,IAAD,CAAQA,KAAK,SAASgB,QAAS,kBAAMT,EAAS,CAACP,KAAM,YAArD,iBAIF,kBAAC,IAAD,CAAOoB,WAAYtB,EACjBuB,YAAY,EACZC,OAAQ,SAAChC,GAAD,OAAUQ,EAAMyB,WAAU,SAAAC,GAAC,OAAIA,IAAMlC,MAC7CkB,QAASA,OC5ECiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASnB,OAAO,kBAAC,EAAD,MAASoB,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cb4d51e2.chunk.js","sourcesContent":["import React, { useReducer } from 'react';\nimport { Table, InputNumber, Button, Input } from 'antd';\nimport './App.scss';\n\n\ninterface Item {\n  name: string\n  price: number\n  count: number\n  quantity: number,\n  discount: number\n}\n\nfunction renderUnit(val: any, item: Item, idx: number) {\n  return `${(item.price * item.discount / (item.count * item.quantity)).toFixed(2)}`\n}\n\ntype State = Item[]\ntype Action =\n  | { type: 'add' }\n  | { type: 'clear' }\n  | { type: 'delete', idx: number }\n  | { type: 'update', key: string, val: any, idx: number}\n\nfunction reducer(items: State, action: Action): State {\n  switch(action.type) {\n    case 'add':\n      return [{ name: '', price: 0, count: 1, discount: 1, quantity: 1 }, ...items]\n    case 'clear':\n      return[]\n    case 'delete':\n      return items.splice(action.idx, 1)\n    case 'update':\n      return [\n        ...items.slice(0, action.idx),\n        {...items[action.idx], [action.key]: action.val } as Item,\n        ...items.slice(action.idx+1)\n      ]\n  }\n}\n\nfunction App() {\n\n  const [ items, dispatch ] = useReducer(reducer, [])\n\n  const columns = [\n    { title: '名称', dataIndex: 'name', render: (val: any, item: Item, idx: number) => {\n      return <Input value={val} onChange={e => dispatch({ type: 'update', key: 'name', val: e.target.value, idx, }) }></Input>\n    } },\n    { title: '数量', dataIndex: 'count', render: (val: any, item: Item, idx: number) => {\n        return <InputNumber value={val} onChange={val => dispatch({type: 'update', key: 'count', val, idx})}></InputNumber>\n      }\n    },\n    {\n      title: '质量', dataIndex: 'quantity', render: (val: any, item: Item, idx: number) => {\n        return <InputNumber value={val} onChange={val => dispatch({type: 'update', key: 'quantity', val, idx})}></InputNumber>\n      }\n    },\n    {\n      title: '价格', dataIndex: 'price', render: (val: any, item: Item, idx: number) => {\n        return <InputNumber value={val} onChange={val => dispatch({type: 'update', key: 'price', val, idx})}></InputNumber>\n      }\n    },\n    {\n      title: '单价', dataIndex: 'unit', render: renderUnit\n    },\n    {\n      title: '操作', dataIndex: 'action', render: (val: any, item: Item, idx: number) => {\n        return <Button type=\"danger\" onClick={() => dispatch({type: 'delete', idx })}>删除</Button>\n      }\n    }\n  ]\n\n  return (\n    <div className=\"App\">\n      <div className=\"table-wrapper\">\n        <div className=\"table-header\">\n          <Button type=\"primary\" style={{marginLeft: 10}}\n            onClick={() => dispatch({ type: 'add' })}>\n            添加\n          </Button>\n          <Button type=\"danger\" onClick={() => dispatch({type: 'clear'})}>\n            清空\n          </Button>\n        </div>\n        <Table dataSource={items}\n          pagination={false}\n          rowKey={(item) => items.findIndex(v => v === item)}\n          columns={columns}></Table>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}